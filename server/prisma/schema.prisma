generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELED
  SELF_CANCELED
  PROCESSING_REFUND
  FINISHED
}

enum OrderType {
  NORMAL_BOOKING
  OWNER_PREBOOKING
}

enum PaymentMethod {
  MOMO
  VNPAY
  CREDITCARD
  BANKTRANSFER
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

enum PlayerLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RequestStatus {
  OPEN
  PROCESSING_REQUEST
  PROCESSING_PAYMENT
  MATCHED
  CLOSED
}

enum SportType {
  FOOTBALL
  PICKLEBALL
  BADMINTON
}

model User {
  id                  Int      @id @default(autoincrement())
  phone               String   @unique
  email               String   @unique
  password            String
  role                Role
  name                String
  gender              Gender
  avatarUrl           String?
  frontIdCardImageUrl String?
  backIdCardImageUrl  String?
  accountNo           String?
  accountName         String?
  acqId               String?
  verified            Boolean  @default(false)
  verificationCode    String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  sportFields   SportField[]
  orders        Order[]
  reviews       Review[]
  matchRequests MatchRequest[]
  notifications Notification[]
  matches       Match[]
  complaints    Complaint[]
}

model SportField {
  id            Int       @id @default(autoincrement())
  ownerId       Int
  sportType     SportType
  name          String
  numOfFields   Int
  address       String
  ward          String
  district      String
  province      String
  googleMapLink String    @default("")
  minPrice      Int?
  maxPrice      Int?
  imageUrl      String?
  description   String?
  accountNo     String
  accountName   String
  acqId         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  owner      User           @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  orders     Order[]
  reviews    Review[]
  promotions Promotion[]
  services   ExtraService[]
  fieldTimes FieldTime[]
}

model FieldTime {
  id           Int      @id @default(autoincrement())
  fieldId      Int
  startTime    String
  endTime      String
  pricePerSlot Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  field SportField @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Booking {
  id          Int      @id @default(autoincrement())
  orderId     Int
  fieldNo     Int
  bookingDate String
  startTime   String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  order        Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  matchRequest MatchRequest?
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  sportFieldId  Int
  customerName  String
  customerPhone String
  proofImageUrl String
  status        OrderStatus
  orderType     OrderType   @default(NORMAL_BOOKING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  sportField SportField @relation(fields: [sportFieldId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  bookings   Booking[]
  payment    Payment?
  review     Review?
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  amount    Int
  method    PaymentMethod
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Review {
  id           Int      @id @default(autoincrement())
  userId       Int
  sportFieldId Int
  orderId      Int      @unique
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  sportField SportField @relation(fields: [sportFieldId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  order      Order      @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Promotion {
  id           Int      @id @default(autoincrement())
  sportFieldId Int
  discountRate Float
  description  String?
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sportField SportField @relation(fields: [sportFieldId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model ExtraService {
  id           Int      @id @default(autoincrement())
  sportFieldId Int
  name         String
  price        Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sportField SportField @relation(fields: [sportFieldId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model MatchRequest {
  id           Int           @id @default(autoincrement())
  userId       Int
  bookingId    Int           @unique
  desiredLevel PlayerLevel
  status       RequestStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  match   Match[]
}

model Match {
  id             Int      @id @default(autoincrement())
  matchRequestId Int
  opponentId     Int
  proofImageUrl  String?
  isRejected     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  matchRequest MatchRequest @relation(fields: [matchRequestId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  opponent     User         @relation(fields: [opponentId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  isRead    Boolean  @default(false)
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model Complaint {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)
}
