generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  OWNER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum PaymentMethod {
  MOMO
  VNPAY
  CREDITCARD
  BANKTRANSFER
}

enum PaymentStatus {
  PAID
  PENDING
  FAILED
}

enum PlayerLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum RequestStatus {
  OPEN
  MATCHED
  CLOSED
}

enum SportType {
  FOOTBALL
  PICKLEBALL
  BADMINTON
}

model User {
  id               Int      @id @default(autoincrement())
  phone            String   @unique
  email            String   @unique
  password         String
  role             Role
  name             String
  gender           Gender
  avatarUrl        String?
  verified         Boolean  @default(false)
  verificationCode String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  sportFields   SportField[]
  bookings      Booking[]
  reviews       Review[]
  matchRequests MatchRequest[]
}

model SportField {
  id           Int       @id @default(autoincrement())
  sportType    SportType
  name         String
  numOfFields  Int
  ownerId      Int
  address      String
  ward         String
  district     String
  province     String
  pricePerHour Int
  description  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  owner         User             @relation(fields: [ownerId], references: [id])
  bookings      Booking[]
  reviews       Review[]
  promotions    Promotion[]
  fieldServices FieldsServices[]
}

model Booking {
  id           Int           @id @default(autoincrement())
  userId       Int
  sportFieldId Int
  bookingDate  DateTime
  startTime    DateTime
  endTime      DateTime
  status       BookingStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  sportField SportField @relation(fields: [sportFieldId], references: [id])
  payments   Payment[]
}

model Payment {
  id        Int           @id @default(autoincrement())
  bookingId Int
  amount    Int
  method    PaymentMethod
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])
}

model Review {
  id           Int      @id @default(autoincrement())
  userId       Int
  sportFieldId Int
  rating       Int
  comment      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id])
  sportField SportField @relation(fields: [sportFieldId], references: [id])
}

model Promotion {
  id           Int      @id @default(autoincrement())
  sportFieldId Int
  discountRate Float
  description  String?
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sportField SportField @relation(fields: [sportFieldId], references: [id])
}

model ExtraService {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fieldServices FieldsServices[]
}

model FieldsServices {
  sportFieldId   Int
  extraServiceId Int
  pricePerHour   Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sportField   SportField   @relation(fields: [sportFieldId], references: [id])
  extraService ExtraService @relation(fields: [extraServiceId], references: [id])

  @@id([sportFieldId, extraServiceId])
}

model MatchRequest {
  id                 Int           @id @default(autoincrement())
  userId             Int
  sportType          SportType
  desiredLevel       PlayerLevel
  preferredDate      DateTime
  preferredStartTime DateTime
  preferredEndTime   DateTime
  address            String?
  ward               String
  district           String
  province           String
  status             RequestStatus
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id])
}
